name: CI/CD Docker Hub → EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME || 'default-cluster-name' }}
  DOCKER_IMAGE: pfalck/devopstest:latest  # Imagen pública en Docker Hub

jobs:
  ci:
    name: CI - Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Ajusta según tu app

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  cd:
    name: CD - Deploy to EKS
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy Docker Hub image to EKS
        run: |
          # Reemplaza deployment y container con los nombres reales
          kubectl set image deployment/your-deployment-name your-container-name=$DOCKER_IMAGE
          kubectl rollout status deployment/your-deployment-name
